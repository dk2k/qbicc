package org.qbicc.machine.file.wasm.model;

import org.qbicc.machine.file.wasm.Op;
import org.qbicc.machine.file.wasm.stream.InsnSeqVisitor;

/**
 * Instructions which do not take arguments. Always singleton.
 */
@SuppressWarnings("SpellCheckingInspection")
public final class SimpleInsn implements Insn<Op.Simple> {
    private final Op.Simple op;

    private SimpleInsn(Op.Simple op) {
        this.op = op;
    }

    @Override
    public Op.Simple op() {
        return op;
    }

    @Override
    public <E extends Exception> void accept(InsnSeqVisitor<E> ev, Encoder encoder) throws E {
        ev.visit(op());
    }

    public static final SimpleInsn drop = new SimpleInsn(Op.Simple.drop);
    public static final SimpleInsn else_ = new SimpleInsn(Op.Simple.else_);
    public static final SimpleInsn end = new SimpleInsn(Op.Simple.end);
    public static final SimpleInsn f32_abs = new SimpleInsn(Op.Simple.f32_abs);
    public static final SimpleInsn f32_add = new SimpleInsn(Op.Simple.f32_add);
    public static final SimpleInsn f32_ceil = new SimpleInsn(Op.Simple.f32_ceil);
    public static final SimpleInsn f32_convert_i32_s = new SimpleInsn(Op.Simple.f32_convert_i32_s);
    public static final SimpleInsn f32_convert_i32_u = new SimpleInsn(Op.Simple.f32_convert_i32_u);
    public static final SimpleInsn f32_convert_i64_s = new SimpleInsn(Op.Simple.f32_convert_i64_s);
    public static final SimpleInsn f32_convert_i64_u = new SimpleInsn(Op.Simple.f32_convert_i64_u);
    public static final SimpleInsn f32_copysign = new SimpleInsn(Op.Simple.f32_copysign);
    public static final SimpleInsn f32_demote_f64 = new SimpleInsn(Op.Simple.f32_demote_f64);
    public static final SimpleInsn f32_div = new SimpleInsn(Op.Simple.f32_div);
    public static final SimpleInsn f32_eq = new SimpleInsn(Op.Simple.f32_eq);
    public static final SimpleInsn f32_floor = new SimpleInsn(Op.Simple.f32_floor);
    public static final SimpleInsn f32_ge = new SimpleInsn(Op.Simple.f32_ge);
    public static final SimpleInsn f32_gt = new SimpleInsn(Op.Simple.f32_gt);
    public static final SimpleInsn f32_le = new SimpleInsn(Op.Simple.f32_le);
    public static final SimpleInsn f32_lt = new SimpleInsn(Op.Simple.f32_lt);
    public static final SimpleInsn f32_max = new SimpleInsn(Op.Simple.f32_max);
    public static final SimpleInsn f32_min = new SimpleInsn(Op.Simple.f32_min);
    public static final SimpleInsn f32_mul = new SimpleInsn(Op.Simple.f32_mul);
    public static final SimpleInsn f32_ne = new SimpleInsn(Op.Simple.f32_ne);
    public static final SimpleInsn f32_nearest = new SimpleInsn(Op.Simple.f32_nearest);
    public static final SimpleInsn f32_neg = new SimpleInsn(Op.Simple.f32_neg);
    public static final SimpleInsn f32_reinterpret_i32 = new SimpleInsn(Op.Simple.f32_reinterpret_i32);
    public static final SimpleInsn f32_sqrt = new SimpleInsn(Op.Simple.f32_sqrt);
    public static final SimpleInsn f32_sub = new SimpleInsn(Op.Simple.f32_sub);
    public static final SimpleInsn f32_trunc = new SimpleInsn(Op.Simple.f32_trunc);
    public static final SimpleInsn f32x4_abs = new SimpleInsn(Op.Simple.f32x4_abs);
    public static final SimpleInsn f32x4_add = new SimpleInsn(Op.Simple.f32x4_add);
    public static final SimpleInsn f32x4_ceil = new SimpleInsn(Op.Simple.f32x4_ceil);
    public static final SimpleInsn f32x4_convert_i32x4_s = new SimpleInsn(Op.Simple.f32x4_convert_i32x4_s);
    public static final SimpleInsn f32x4_convert_i32x4_u = new SimpleInsn(Op.Simple.f32x4_convert_i32x4_u);
    public static final SimpleInsn f32x4_demote_f64x2_zero = new SimpleInsn(Op.Simple.f32x4_demote_f64x2_zero);
    public static final SimpleInsn f32x4_div = new SimpleInsn(Op.Simple.f32x4_div);
    public static final SimpleInsn f32x4_eq = new SimpleInsn(Op.Simple.f32x4_eq);
    public static final SimpleInsn f32x4_floor = new SimpleInsn(Op.Simple.f32x4_floor);
    public static final SimpleInsn f32x4_ge = new SimpleInsn(Op.Simple.f32x4_ge);
    public static final SimpleInsn f32x4_gt = new SimpleInsn(Op.Simple.f32x4_gt);
    public static final SimpleInsn f32x4_le = new SimpleInsn(Op.Simple.f32x4_le);
    public static final SimpleInsn f32x4_lt = new SimpleInsn(Op.Simple.f32x4_lt);
    public static final SimpleInsn f32x4_max = new SimpleInsn(Op.Simple.f32x4_max);
    public static final SimpleInsn f32x4_min = new SimpleInsn(Op.Simple.f32x4_min);
    public static final SimpleInsn f32x4_mul = new SimpleInsn(Op.Simple.f32x4_mul);
    public static final SimpleInsn f32x4_ne = new SimpleInsn(Op.Simple.f32x4_ne);
    public static final SimpleInsn f32x4_nearest = new SimpleInsn(Op.Simple.f32x4_nearest);
    public static final SimpleInsn f32x4_neg = new SimpleInsn(Op.Simple.f32x4_neg);
    public static final SimpleInsn f32x4_pmax = new SimpleInsn(Op.Simple.f32x4_pmax);
    public static final SimpleInsn f32x4_pmin = new SimpleInsn(Op.Simple.f32x4_pmin);
    public static final SimpleInsn f32x4_splat = new SimpleInsn(Op.Simple.f32x4_splat);
    public static final SimpleInsn f32x4_sqrt = new SimpleInsn(Op.Simple.f32x4_sqrt);
    public static final SimpleInsn f32x4_sub = new SimpleInsn(Op.Simple.f32x4_sub);
    public static final SimpleInsn f32x4_trunc = new SimpleInsn(Op.Simple.f32x4_trunc);
    public static final SimpleInsn f64_abs = new SimpleInsn(Op.Simple.f64_abs);
    public static final SimpleInsn f64_add = new SimpleInsn(Op.Simple.f64_add);
    public static final SimpleInsn f64_ceil = new SimpleInsn(Op.Simple.f64_ceil);
    public static final SimpleInsn f64_convert_i32_s = new SimpleInsn(Op.Simple.f64_convert_i32_s);
    public static final SimpleInsn f64_convert_i32_u = new SimpleInsn(Op.Simple.f64_convert_i32_u);
    public static final SimpleInsn f64_convert_i64_s = new SimpleInsn(Op.Simple.f64_convert_i64_s);
    public static final SimpleInsn f64_convert_i64_u = new SimpleInsn(Op.Simple.f64_convert_i64_u);
    public static final SimpleInsn f64_copysign = new SimpleInsn(Op.Simple.f64_copysign);
    public static final SimpleInsn f64_div = new SimpleInsn(Op.Simple.f64_div);
    public static final SimpleInsn f64_eq = new SimpleInsn(Op.Simple.f64_eq);
    public static final SimpleInsn f64_floor = new SimpleInsn(Op.Simple.f64_floor);
    public static final SimpleInsn f64_ge = new SimpleInsn(Op.Simple.f64_ge);
    public static final SimpleInsn f64_gt = new SimpleInsn(Op.Simple.f64_gt);
    public static final SimpleInsn f64_le = new SimpleInsn(Op.Simple.f64_le);
    public static final SimpleInsn f64_lt = new SimpleInsn(Op.Simple.f64_lt);
    public static final SimpleInsn f64_max = new SimpleInsn(Op.Simple.f64_max);
    public static final SimpleInsn f64_min = new SimpleInsn(Op.Simple.f64_min);
    public static final SimpleInsn f64_mul = new SimpleInsn(Op.Simple.f64_mul);
    public static final SimpleInsn f64_ne = new SimpleInsn(Op.Simple.f64_ne);
    public static final SimpleInsn f64_nearest = new SimpleInsn(Op.Simple.f64_nearest);
    public static final SimpleInsn f64_neg = new SimpleInsn(Op.Simple.f64_neg);
    public static final SimpleInsn f64_promote_f32 = new SimpleInsn(Op.Simple.f64_promote_f32);
    public static final SimpleInsn f64_reinterpret_i64 = new SimpleInsn(Op.Simple.f64_reinterpret_i64);
    public static final SimpleInsn f64_sqrt = new SimpleInsn(Op.Simple.f64_sqrt);
    public static final SimpleInsn f64_sub = new SimpleInsn(Op.Simple.f64_sub);
    public static final SimpleInsn f64_trunc = new SimpleInsn(Op.Simple.f64_trunc);
    public static final SimpleInsn f64x2_abs = new SimpleInsn(Op.Simple.f64x2_abs);
    public static final SimpleInsn f64x2_add = new SimpleInsn(Op.Simple.f64x2_add);
    public static final SimpleInsn f64x2_ceil = new SimpleInsn(Op.Simple.f64x2_ceil);
    public static final SimpleInsn f64x2_convert_low_i32x4_s = new SimpleInsn(Op.Simple.f64x2_convert_low_i32x4_s);
    public static final SimpleInsn f64x2_convert_low_i32x4_u = new SimpleInsn(Op.Simple.f64x2_convert_low_i32x4_u);
    public static final SimpleInsn f64x2_div = new SimpleInsn(Op.Simple.f64x2_div);
    public static final SimpleInsn f64x2_eq = new SimpleInsn(Op.Simple.f64x2_eq);
    public static final SimpleInsn f64x2_floor = new SimpleInsn(Op.Simple.f64x2_floor);
    public static final SimpleInsn f64x2_ge = new SimpleInsn(Op.Simple.f64x2_ge);
    public static final SimpleInsn f64x2_gt = new SimpleInsn(Op.Simple.f64x2_gt);
    public static final SimpleInsn f64x2_le = new SimpleInsn(Op.Simple.f64x2_le);
    public static final SimpleInsn f64x2_lt = new SimpleInsn(Op.Simple.f64x2_lt);
    public static final SimpleInsn f64x2_max = new SimpleInsn(Op.Simple.f64x2_max);
    public static final SimpleInsn f64x2_min = new SimpleInsn(Op.Simple.f64x2_min);
    public static final SimpleInsn f64x2_mul = new SimpleInsn(Op.Simple.f64x2_mul);
    public static final SimpleInsn f64x2_ne = new SimpleInsn(Op.Simple.f64x2_ne);
    public static final SimpleInsn f64x2_nearest = new SimpleInsn(Op.Simple.f64x2_nearest);
    public static final SimpleInsn f64x2_neg = new SimpleInsn(Op.Simple.f64x2_neg);
    public static final SimpleInsn f64x2_pmax = new SimpleInsn(Op.Simple.f64x2_pmax);
    public static final SimpleInsn f64x2_pmin = new SimpleInsn(Op.Simple.f64x2_pmin);
    public static final SimpleInsn f64x2_promote_low_f32x4 = new SimpleInsn(Op.Simple.f64x2_promote_low_f32x4);
    public static final SimpleInsn f64x2_splat = new SimpleInsn(Op.Simple.f64x2_splat);
    public static final SimpleInsn f64x2_sqrt = new SimpleInsn(Op.Simple.f64x2_sqrt);
    public static final SimpleInsn f64x2_sub = new SimpleInsn(Op.Simple.f64x2_sub);
    public static final SimpleInsn f64x2_trunc = new SimpleInsn(Op.Simple.f64x2_trunc);
    public static final SimpleInsn i16x8_abs = new SimpleInsn(Op.Simple.i16x8_abs);
    public static final SimpleInsn i16x8_add = new SimpleInsn(Op.Simple.i16x8_add);
    public static final SimpleInsn i16x8_add_sat_s = new SimpleInsn(Op.Simple.i16x8_add_sat_s);
    public static final SimpleInsn i16x8_add_sat_u = new SimpleInsn(Op.Simple.i16x8_add_sat_u);
    public static final SimpleInsn i16x8_all_true = new SimpleInsn(Op.Simple.i16x8_all_true);
    public static final SimpleInsn i16x8_avgr_u = new SimpleInsn(Op.Simple.i16x8_avgr_u);
    public static final SimpleInsn i16x8_bitmask = new SimpleInsn(Op.Simple.i16x8_bitmask);
    public static final SimpleInsn i16x8_eq = new SimpleInsn(Op.Simple.i16x8_eq);
    public static final SimpleInsn i16x8_extadd_pariwise_i8x16_s = new SimpleInsn(Op.Simple.i16x8_extadd_pariwise_i8x16_s);
    public static final SimpleInsn i16x8_extadd_pariwise_i8x16_u = new SimpleInsn(Op.Simple.i16x8_extadd_pariwise_i8x16_u);
    public static final SimpleInsn i16x8_extend_high_i8x16_s = new SimpleInsn(Op.Simple.i16x8_extend_high_i8x16_s);
    public static final SimpleInsn i16x8_extend_high_i8x16_u = new SimpleInsn(Op.Simple.i16x8_extend_high_i8x16_u);
    public static final SimpleInsn i16x8_extend_low_i8x16_s = new SimpleInsn(Op.Simple.i16x8_extend_low_i8x16_s);
    public static final SimpleInsn i16x8_extend_low_i8x16_u = new SimpleInsn(Op.Simple.i16x8_extend_low_i8x16_u);
    public static final SimpleInsn i16x8_extmul_high_i8x16_s = new SimpleInsn(Op.Simple.i16x8_extmul_high_i8x16_s);
    public static final SimpleInsn i16x8_extmul_high_i8x16_u = new SimpleInsn(Op.Simple.i16x8_extmul_high_i8x16_u);
    public static final SimpleInsn i16x8_extmul_low_i8x16_s = new SimpleInsn(Op.Simple.i16x8_extmul_low_i8x16_s);
    public static final SimpleInsn i16x8_extmul_low_i8x16_u = new SimpleInsn(Op.Simple.i16x8_extmul_low_i8x16_u);
    public static final SimpleInsn i16x8_ge_s = new SimpleInsn(Op.Simple.i16x8_ge_s);
    public static final SimpleInsn i16x8_ge_u = new SimpleInsn(Op.Simple.i16x8_ge_u);
    public static final SimpleInsn i16x8_gt_s = new SimpleInsn(Op.Simple.i16x8_gt_s);
    public static final SimpleInsn i16x8_gt_u = new SimpleInsn(Op.Simple.i16x8_gt_u);
    public static final SimpleInsn i16x8_le_s = new SimpleInsn(Op.Simple.i16x8_le_s);
    public static final SimpleInsn i16x8_le_u = new SimpleInsn(Op.Simple.i16x8_le_u);
    public static final SimpleInsn i16x8_lt_s = new SimpleInsn(Op.Simple.i16x8_lt_s);
    public static final SimpleInsn i16x8_lt_u = new SimpleInsn(Op.Simple.i16x8_lt_u);
    public static final SimpleInsn i16x8_max_s = new SimpleInsn(Op.Simple.i16x8_max_s);
    public static final SimpleInsn i16x8_max_u = new SimpleInsn(Op.Simple.i16x8_max_u);
    public static final SimpleInsn i16x8_min_s = new SimpleInsn(Op.Simple.i16x8_min_s);
    public static final SimpleInsn i16x8_min_u = new SimpleInsn(Op.Simple.i16x8_min_u);
    public static final SimpleInsn i16x8_mul = new SimpleInsn(Op.Simple.i16x8_mul);
    public static final SimpleInsn i16x8_narrow_i32x4_s = new SimpleInsn(Op.Simple.i16x8_narrow_i32x4_s);
    public static final SimpleInsn i16x8_narrow_i32x4_u = new SimpleInsn(Op.Simple.i16x8_narrow_i32x4_u);
    public static final SimpleInsn i16x8_ne = new SimpleInsn(Op.Simple.i16x8_ne);
    public static final SimpleInsn i16x8_neg = new SimpleInsn(Op.Simple.i16x8_neg);
    public static final SimpleInsn i16x8_q15mulr_sat_s = new SimpleInsn(Op.Simple.i16x8_q15mulr_sat_s);
    public static final SimpleInsn i16x8_shl = new SimpleInsn(Op.Simple.i16x8_shl);
    public static final SimpleInsn i16x8_shr_s = new SimpleInsn(Op.Simple.i16x8_shr_s);
    public static final SimpleInsn i16x8_shr_u = new SimpleInsn(Op.Simple.i16x8_shr_u);
    public static final SimpleInsn i16x8_splat = new SimpleInsn(Op.Simple.i16x8_splat);
    public static final SimpleInsn i16x8_sub = new SimpleInsn(Op.Simple.i16x8_sub);
    public static final SimpleInsn i16x8_sub_sat_s = new SimpleInsn(Op.Simple.i16x8_sub_sat_s);
    public static final SimpleInsn i16x8_sub_sat_u = new SimpleInsn(Op.Simple.i16x8_sub_sat_u);
    public static final SimpleInsn i32_add = new SimpleInsn(Op.Simple.i32_add);
    public static final SimpleInsn i32_and = new SimpleInsn(Op.Simple.i32_and);
    public static final SimpleInsn i32_clz = new SimpleInsn(Op.Simple.i32_clz);
    public static final SimpleInsn i32_ctz = new SimpleInsn(Op.Simple.i32_ctz);
    public static final SimpleInsn i32_div_s = new SimpleInsn(Op.Simple.i32_div_s);
    public static final SimpleInsn i32_div_u = new SimpleInsn(Op.Simple.i32_div_u);
    public static final SimpleInsn i32_eq = new SimpleInsn(Op.Simple.i32_eq);
    public static final SimpleInsn i32_eqz = new SimpleInsn(Op.Simple.i32_eqz);
    public static final SimpleInsn i32_extend16_s = new SimpleInsn(Op.Simple.i32_extend16_s);
    public static final SimpleInsn i32_extend8_s = new SimpleInsn(Op.Simple.i32_extend8_s);
    public static final SimpleInsn i32_ge_s = new SimpleInsn(Op.Simple.i32_ge_s);
    public static final SimpleInsn i32_ge_u = new SimpleInsn(Op.Simple.i32_ge_u);
    public static final SimpleInsn i32_gt_s = new SimpleInsn(Op.Simple.i32_gt_s);
    public static final SimpleInsn i32_gt_u = new SimpleInsn(Op.Simple.i32_gt_u);
    public static final SimpleInsn i32_le_s = new SimpleInsn(Op.Simple.i32_le_s);
    public static final SimpleInsn i32_le_u = new SimpleInsn(Op.Simple.i32_le_u);
    public static final SimpleInsn i32_lt_s = new SimpleInsn(Op.Simple.i32_lt_s);
    public static final SimpleInsn i32_lt_u = new SimpleInsn(Op.Simple.i32_lt_u);
    public static final SimpleInsn i32_mul = new SimpleInsn(Op.Simple.i32_mul);
    public static final SimpleInsn i32_ne = new SimpleInsn(Op.Simple.i32_ne);
    public static final SimpleInsn i32_or = new SimpleInsn(Op.Simple.i32_or);
    public static final SimpleInsn i32_popcnt = new SimpleInsn(Op.Simple.i32_popcnt);
    public static final SimpleInsn i32_reinterpret_f32 = new SimpleInsn(Op.Simple.i32_reinterpret_f32);
    public static final SimpleInsn i32_rem_s = new SimpleInsn(Op.Simple.i32_rem_s);
    public static final SimpleInsn i32_rem_u = new SimpleInsn(Op.Simple.i32_rem_u);
    public static final SimpleInsn i32_rotl = new SimpleInsn(Op.Simple.i32_rotl);
    public static final SimpleInsn i32_rotr = new SimpleInsn(Op.Simple.i32_rotr);
    public static final SimpleInsn i32_shl = new SimpleInsn(Op.Simple.i32_shl);
    public static final SimpleInsn i32_shr_s = new SimpleInsn(Op.Simple.i32_shr_s);
    public static final SimpleInsn i32_shr_u = new SimpleInsn(Op.Simple.i32_shr_u);
    public static final SimpleInsn i32_sub = new SimpleInsn(Op.Simple.i32_sub);
    public static final SimpleInsn i32_trunc_f32_s = new SimpleInsn(Op.Simple.i32_trunc_f32_s);
    public static final SimpleInsn i32_trunc_f32_u = new SimpleInsn(Op.Simple.i32_trunc_f32_u);
    public static final SimpleInsn i32_trunc_f64_s = new SimpleInsn(Op.Simple.i32_trunc_f64_s);
    public static final SimpleInsn i32_trunc_f64_u = new SimpleInsn(Op.Simple.i32_trunc_f64_u);
    public static final SimpleInsn i32_trunc_sat_f32_s = new SimpleInsn(Op.Simple.i32_trunc_sat_f32_s);
    public static final SimpleInsn i32_trunc_sat_f32_u = new SimpleInsn(Op.Simple.i32_trunc_sat_f32_u);
    public static final SimpleInsn i32_trunc_sat_f64_s = new SimpleInsn(Op.Simple.i32_trunc_sat_f64_s);
    public static final SimpleInsn i32_trunc_sat_f64_u = new SimpleInsn(Op.Simple.i32_trunc_sat_f64_u);
    public static final SimpleInsn i32_wrap_i64 = new SimpleInsn(Op.Simple.i32_wrap_i64);
    public static final SimpleInsn i32_xor = new SimpleInsn(Op.Simple.i32_xor);
    public static final SimpleInsn i32x4_abs = new SimpleInsn(Op.Simple.i32x4_abs);
    public static final SimpleInsn i32x4_add = new SimpleInsn(Op.Simple.i32x4_add);
    public static final SimpleInsn i32x4_all_true = new SimpleInsn(Op.Simple.i32x4_all_true);
    public static final SimpleInsn i32x4_bitmask = new SimpleInsn(Op.Simple.i32x4_bitmask);
    public static final SimpleInsn i32x4_dot_i16x8_s = new SimpleInsn(Op.Simple.i32x4_dot_i16x8_s);
    public static final SimpleInsn i32x4_eq = new SimpleInsn(Op.Simple.i32x4_eq);
    public static final SimpleInsn i32x4_extadd_pariwise_i16x8_s = new SimpleInsn(Op.Simple.i32x4_extadd_pariwise_i16x8_s);
    public static final SimpleInsn i32x4_extadd_pariwise_i16x8_u = new SimpleInsn(Op.Simple.i32x4_extadd_pariwise_i16x8_u);
    public static final SimpleInsn i32x4_extend_high_i16x8_s = new SimpleInsn(Op.Simple.i32x4_extend_high_i16x8_s);
    public static final SimpleInsn i32x4_extend_high_i16x8_u = new SimpleInsn(Op.Simple.i32x4_extend_high_i16x8_u);
    public static final SimpleInsn i32x4_extend_low_i16x8_s = new SimpleInsn(Op.Simple.i32x4_extend_low_i16x8_s);
    public static final SimpleInsn i32x4_extend_low_i16x8_u = new SimpleInsn(Op.Simple.i32x4_extend_low_i16x8_u);
    public static final SimpleInsn i32x4_extmul_high_i16x8_s = new SimpleInsn(Op.Simple.i32x4_extmul_high_i16x8_s);
    public static final SimpleInsn i32x4_extmul_high_i16x8_u = new SimpleInsn(Op.Simple.i32x4_extmul_high_i16x8_u);
    public static final SimpleInsn i32x4_extmul_low_i16x8_s = new SimpleInsn(Op.Simple.i32x4_extmul_low_i16x8_s);
    public static final SimpleInsn i32x4_extmul_low_i16x8_u = new SimpleInsn(Op.Simple.i32x4_extmul_low_i16x8_u);
    public static final SimpleInsn i32x4_ge_s = new SimpleInsn(Op.Simple.i32x4_ge_s);
    public static final SimpleInsn i32x4_ge_u = new SimpleInsn(Op.Simple.i32x4_ge_u);
    public static final SimpleInsn i32x4_gt_s = new SimpleInsn(Op.Simple.i32x4_gt_s);
    public static final SimpleInsn i32x4_gt_u = new SimpleInsn(Op.Simple.i32x4_gt_u);
    public static final SimpleInsn i32x4_le_s = new SimpleInsn(Op.Simple.i32x4_le_s);
    public static final SimpleInsn i32x4_le_u = new SimpleInsn(Op.Simple.i32x4_le_u);
    public static final SimpleInsn i32x4_lt_s = new SimpleInsn(Op.Simple.i32x4_lt_s);
    public static final SimpleInsn i32x4_lt_u = new SimpleInsn(Op.Simple.i32x4_lt_u);
    public static final SimpleInsn i32x4_max_s = new SimpleInsn(Op.Simple.i32x4_max_s);
    public static final SimpleInsn i32x4_max_u = new SimpleInsn(Op.Simple.i32x4_max_u);
    public static final SimpleInsn i32x4_min_s = new SimpleInsn(Op.Simple.i32x4_min_s);
    public static final SimpleInsn i32x4_min_u = new SimpleInsn(Op.Simple.i32x4_min_u);
    public static final SimpleInsn i32x4_mul = new SimpleInsn(Op.Simple.i32x4_mul);
    public static final SimpleInsn i32x4_ne = new SimpleInsn(Op.Simple.i32x4_ne);
    public static final SimpleInsn i32x4_neg = new SimpleInsn(Op.Simple.i32x4_neg);
    public static final SimpleInsn i32x4_shl = new SimpleInsn(Op.Simple.i32x4_shl);
    public static final SimpleInsn i32x4_shr_s = new SimpleInsn(Op.Simple.i32x4_shr_s);
    public static final SimpleInsn i32x4_shr_u = new SimpleInsn(Op.Simple.i32x4_shr_u);
    public static final SimpleInsn i32x4_splat = new SimpleInsn(Op.Simple.i32x4_splat);
    public static final SimpleInsn i32x4_sub = new SimpleInsn(Op.Simple.i32x4_sub);
    public static final SimpleInsn i32x4_trunc_sat_f32x4_s = new SimpleInsn(Op.Simple.i32x4_trunc_sat_f32x4_s);
    public static final SimpleInsn i32x4_trunc_sat_f32x4_u = new SimpleInsn(Op.Simple.i32x4_trunc_sat_f32x4_u);
    public static final SimpleInsn i32x4_trunc_sat_f64x2_s_zero = new SimpleInsn(Op.Simple.i32x4_trunc_sat_f64x2_s_zero);
    public static final SimpleInsn i32x4_trunc_sat_f64x2_u_zero = new SimpleInsn(Op.Simple.i32x4_trunc_sat_f64x2_u_zero);
    public static final SimpleInsn i64_add = new SimpleInsn(Op.Simple.i64_add);
    public static final SimpleInsn i64_and = new SimpleInsn(Op.Simple.i64_and);
    public static final SimpleInsn i64_clz = new SimpleInsn(Op.Simple.i64_clz);
    public static final SimpleInsn i64_ctz = new SimpleInsn(Op.Simple.i64_ctz);
    public static final SimpleInsn i64_div_s = new SimpleInsn(Op.Simple.i64_div_s);
    public static final SimpleInsn i64_div_u = new SimpleInsn(Op.Simple.i64_div_u);
    public static final SimpleInsn i64_eq = new SimpleInsn(Op.Simple.i64_eq);
    public static final SimpleInsn i64_eqz = new SimpleInsn(Op.Simple.i64_eqz);
    public static final SimpleInsn i64_extend16_s = new SimpleInsn(Op.Simple.i64_extend16_s);
    public static final SimpleInsn i64_extend32_s = new SimpleInsn(Op.Simple.i64_extend32_s);
    public static final SimpleInsn i64_extend8_s = new SimpleInsn(Op.Simple.i64_extend8_s);
    public static final SimpleInsn i64_extend_i32_s = new SimpleInsn(Op.Simple.i64_extend_i32_s);
    public static final SimpleInsn i64_extend_i32_u = new SimpleInsn(Op.Simple.i64_extend_i32_u);
    public static final SimpleInsn i64_ge_s = new SimpleInsn(Op.Simple.i64_ge_s);
    public static final SimpleInsn i64_ge_u = new SimpleInsn(Op.Simple.i64_ge_u);
    public static final SimpleInsn i64_gt_s = new SimpleInsn(Op.Simple.i64_gt_s);
    public static final SimpleInsn i64_gt_u = new SimpleInsn(Op.Simple.i64_gt_u);
    public static final SimpleInsn i64_le_s = new SimpleInsn(Op.Simple.i64_le_s);
    public static final SimpleInsn i64_le_u = new SimpleInsn(Op.Simple.i64_le_u);
    public static final SimpleInsn i64_lt_s = new SimpleInsn(Op.Simple.i64_lt_s);
    public static final SimpleInsn i64_lt_u = new SimpleInsn(Op.Simple.i64_lt_u);
    public static final SimpleInsn i64_mul = new SimpleInsn(Op.Simple.i64_mul);
    public static final SimpleInsn i64_ne = new SimpleInsn(Op.Simple.i64_ne);
    public static final SimpleInsn i64_or = new SimpleInsn(Op.Simple.i64_or);
    public static final SimpleInsn i64_popcnt = new SimpleInsn(Op.Simple.i64_popcnt);
    public static final SimpleInsn i64_reinterpret_f64 = new SimpleInsn(Op.Simple.i64_reinterpret_f64);
    public static final SimpleInsn i64_rem_s = new SimpleInsn(Op.Simple.i64_rem_s);
    public static final SimpleInsn i64_rem_u = new SimpleInsn(Op.Simple.i64_rem_u);
    public static final SimpleInsn i64_rotl = new SimpleInsn(Op.Simple.i64_rotl);
    public static final SimpleInsn i64_rotr = new SimpleInsn(Op.Simple.i64_rotr);
    public static final SimpleInsn i64_shl = new SimpleInsn(Op.Simple.i64_shl);
    public static final SimpleInsn i64_shr_s = new SimpleInsn(Op.Simple.i64_shr_s);
    public static final SimpleInsn i64_shr_u = new SimpleInsn(Op.Simple.i64_shr_u);
    public static final SimpleInsn i64_sub = new SimpleInsn(Op.Simple.i64_sub);
    public static final SimpleInsn i64_trunc_f32_s = new SimpleInsn(Op.Simple.i64_trunc_f32_s);
    public static final SimpleInsn i64_trunc_f32_u = new SimpleInsn(Op.Simple.i64_trunc_f32_u);
    public static final SimpleInsn i64_trunc_f64_s = new SimpleInsn(Op.Simple.i64_trunc_f64_s);
    public static final SimpleInsn i64_trunc_f64_u = new SimpleInsn(Op.Simple.i64_trunc_f64_u);
    public static final SimpleInsn i64_trunc_sat_f32_s = new SimpleInsn(Op.Simple.i64_trunc_sat_f32_s);
    public static final SimpleInsn i64_trunc_sat_f32_u = new SimpleInsn(Op.Simple.i64_trunc_sat_f32_u);
    public static final SimpleInsn i64_trunc_sat_f64_s = new SimpleInsn(Op.Simple.i64_trunc_sat_f64_s);
    public static final SimpleInsn i64_trunc_sat_f64_u = new SimpleInsn(Op.Simple.i64_trunc_sat_f64_u);
    public static final SimpleInsn i64_xor = new SimpleInsn(Op.Simple.i64_xor);
    public static final SimpleInsn i64x2_abs = new SimpleInsn(Op.Simple.i64x2_abs);
    public static final SimpleInsn i64x2_add = new SimpleInsn(Op.Simple.i64x2_add);
    public static final SimpleInsn i64x2_all_true = new SimpleInsn(Op.Simple.i64x2_all_true);
    public static final SimpleInsn i64x2_bitmask = new SimpleInsn(Op.Simple.i64x2_bitmask);
    public static final SimpleInsn i64x2_dot_i16x8_s = new SimpleInsn(Op.Simple.i64x2_dot_i16x8_s);
    public static final SimpleInsn i64x2_extend_high_i32x4_s = new SimpleInsn(Op.Simple.i64x2_extend_high_i32x4_s);
    public static final SimpleInsn i64x2_extend_high_i32x4_u = new SimpleInsn(Op.Simple.i64x2_extend_high_i32x4_u);
    public static final SimpleInsn i64x2_extend_low_i32x4_s = new SimpleInsn(Op.Simple.i64x2_extend_low_i32x4_s);
    public static final SimpleInsn i64x2_extend_low_i32x4_u = new SimpleInsn(Op.Simple.i64x2_extend_low_i32x4_u);
    public static final SimpleInsn i64x2_extmul_high_i32x4_s = new SimpleInsn(Op.Simple.i64x2_extmul_high_i32x4_s);
    public static final SimpleInsn i64x2_extmul_high_i32x4_u = new SimpleInsn(Op.Simple.i64x2_extmul_high_i32x4_u);
    public static final SimpleInsn i64x2_extmul_low_i32x4_s = new SimpleInsn(Op.Simple.i64x2_extmul_low_i32x4_s);
    public static final SimpleInsn i64x2_extmul_low_i32x4_u = new SimpleInsn(Op.Simple.i64x2_extmul_low_i32x4_u);
    public static final SimpleInsn i64x2_max_s = new SimpleInsn(Op.Simple.i64x2_max_s);
    public static final SimpleInsn i64x2_max_u = new SimpleInsn(Op.Simple.i64x2_max_u);
    public static final SimpleInsn i64x2_min_s = new SimpleInsn(Op.Simple.i64x2_min_s);
    public static final SimpleInsn i64x2_min_u = new SimpleInsn(Op.Simple.i64x2_min_u);
    public static final SimpleInsn i64x2_mul = new SimpleInsn(Op.Simple.i64x2_mul);
    public static final SimpleInsn i64x2_neg = new SimpleInsn(Op.Simple.i64x2_neg);
    public static final SimpleInsn i64x2_shl = new SimpleInsn(Op.Simple.i64x2_shl);
    public static final SimpleInsn i64x2_shr_s = new SimpleInsn(Op.Simple.i64x2_shr_s);
    public static final SimpleInsn i64x2_shr_u = new SimpleInsn(Op.Simple.i64x2_shr_u);
    public static final SimpleInsn i64x2_splat = new SimpleInsn(Op.Simple.i64x2_splat);
    public static final SimpleInsn i64x2_sub = new SimpleInsn(Op.Simple.i64x2_sub);
    public static final SimpleInsn i8x16_abs = new SimpleInsn(Op.Simple.i8x16_abs);
    public static final SimpleInsn i8x16_add = new SimpleInsn(Op.Simple.i8x16_add);
    public static final SimpleInsn i8x16_add_sat_s = new SimpleInsn(Op.Simple.i8x16_add_sat_s);
    public static final SimpleInsn i8x16_add_sat_u = new SimpleInsn(Op.Simple.i8x16_add_sat_u);
    public static final SimpleInsn i8x16_all_true = new SimpleInsn(Op.Simple.i8x16_all_true);
    public static final SimpleInsn i8x16_avgr_u = new SimpleInsn(Op.Simple.i8x16_avgr_u);
    public static final SimpleInsn i8x16_bitmask = new SimpleInsn(Op.Simple.i8x16_bitmask);
    public static final SimpleInsn i8x16_eq = new SimpleInsn(Op.Simple.i8x16_eq);
    public static final SimpleInsn i8x16_ge_s = new SimpleInsn(Op.Simple.i8x16_ge_s);
    public static final SimpleInsn i8x16_ge_u = new SimpleInsn(Op.Simple.i8x16_ge_u);
    public static final SimpleInsn i8x16_gt_s = new SimpleInsn(Op.Simple.i8x16_gt_s);
    public static final SimpleInsn i8x16_gt_u = new SimpleInsn(Op.Simple.i8x16_gt_u);
    public static final SimpleInsn i8x16_le_s = new SimpleInsn(Op.Simple.i8x16_le_s);
    public static final SimpleInsn i8x16_le_u = new SimpleInsn(Op.Simple.i8x16_le_u);
    public static final SimpleInsn i8x16_lt_s = new SimpleInsn(Op.Simple.i8x16_lt_s);
    public static final SimpleInsn i8x16_lt_u = new SimpleInsn(Op.Simple.i8x16_lt_u);
    public static final SimpleInsn i8x16_max_s = new SimpleInsn(Op.Simple.i8x16_max_s);
    public static final SimpleInsn i8x16_max_u = new SimpleInsn(Op.Simple.i8x16_max_u);
    public static final SimpleInsn i8x16_min_s = new SimpleInsn(Op.Simple.i8x16_min_s);
    public static final SimpleInsn i8x16_min_u = new SimpleInsn(Op.Simple.i8x16_min_u);
    public static final SimpleInsn i8x16_narrow_i16x8_s = new SimpleInsn(Op.Simple.i8x16_narrow_i16x8_s);
    public static final SimpleInsn i8x16_narrow_i16x8_u = new SimpleInsn(Op.Simple.i8x16_narrow_i16x8_u);
    public static final SimpleInsn i8x16_ne = new SimpleInsn(Op.Simple.i8x16_ne);
    public static final SimpleInsn i8x16_neg = new SimpleInsn(Op.Simple.i8x16_neg);
    public static final SimpleInsn i8x16_popcnt = new SimpleInsn(Op.Simple.i8x16_popcnt);
    public static final SimpleInsn i8x16_shl = new SimpleInsn(Op.Simple.i8x16_shl);
    public static final SimpleInsn i8x16_shr_s = new SimpleInsn(Op.Simple.i8x16_shr_s);
    public static final SimpleInsn i8x16_shr_u = new SimpleInsn(Op.Simple.i8x16_shr_u);
    public static final SimpleInsn i8x16_splat = new SimpleInsn(Op.Simple.i8x16_splat);
    public static final SimpleInsn i8x16_sub = new SimpleInsn(Op.Simple.i8x16_sub);
    public static final SimpleInsn i8x16_sub_sat_s = new SimpleInsn(Op.Simple.i8x16_sub_sat_s);
    public static final SimpleInsn i8x16_sub_sat_u = new SimpleInsn(Op.Simple.i8x16_sub_sat_u);
    public static final SimpleInsn i8x16_swizzle = new SimpleInsn(Op.Simple.i8x16_swizzle);
    public static final SimpleInsn nop = new SimpleInsn(Op.Simple.nop);
    public static final SimpleInsn ref_is_null = new SimpleInsn(Op.Simple.ref_is_null);
    public static final SimpleInsn return_ = new SimpleInsn(Op.Simple.return_);
    public static final SimpleInsn select = new SimpleInsn(Op.Simple.select);
    public static final SimpleInsn unreachable = new SimpleInsn(Op.Simple.unreachable);
    public static final SimpleInsn v128_and = new SimpleInsn(Op.Simple.v128_and);
    public static final SimpleInsn v128_andnot = new SimpleInsn(Op.Simple.v128_andnot);
    public static final SimpleInsn v128_any_true = new SimpleInsn(Op.Simple.v128_any_true);
    public static final SimpleInsn v128_bitselect = new SimpleInsn(Op.Simple.v128_bitselect);
    public static final SimpleInsn v128_not = new SimpleInsn(Op.Simple.v128_not);
    public static final SimpleInsn v128_or = new SimpleInsn(Op.Simple.v128_or);
    public static final SimpleInsn v128_xor = new SimpleInsn(Op.Simple.v128_xor);

    
    public static SimpleInsn forOp(Op.Simple insn) {
        return switch (insn) {
            case drop -> drop;
            case else_ -> else_;
            case end -> end;
            case f32_abs -> f32_abs;
            case f32_add -> f32_add;
            case f32_ceil -> f32_ceil;
            case f32_convert_i32_s -> f32_convert_i32_s;
            case f32_convert_i32_u -> f32_convert_i32_u;
            case f32_convert_i64_s -> f32_convert_i64_s;
            case f32_convert_i64_u -> f32_convert_i64_u;
            case f32_copysign -> f32_copysign;
            case f32_demote_f64 -> f32_demote_f64;
            case f32_div -> f32_div;
            case f32_eq -> f32_eq;
            case f32_floor -> f32_floor;
            case f32_ge -> f32_ge;
            case f32_gt -> f32_gt;
            case f32_le -> f32_le;
            case f32_lt -> f32_lt;
            case f32_max -> f32_max;
            case f32_min -> f32_min;
            case f32_mul -> f32_mul;
            case f32_ne -> f32_ne;
            case f32_nearest -> f32_nearest;
            case f32_neg -> f32_neg;
            case f32_reinterpret_i32 -> f32_reinterpret_i32;
            case f32_sqrt -> f32_sqrt;
            case f32_sub -> f32_sub;
            case f32_trunc -> f32_trunc;
            case f32x4_abs -> f32x4_abs;
            case f32x4_add -> f32x4_add;
            case f32x4_ceil -> f32x4_ceil;
            case f32x4_convert_i32x4_s -> f32x4_convert_i32x4_s;
            case f32x4_convert_i32x4_u -> f32x4_convert_i32x4_u;
            case f32x4_demote_f64x2_zero -> f32x4_demote_f64x2_zero;
            case f32x4_div -> f32x4_div;
            case f32x4_eq -> f32x4_eq;
            case f32x4_floor -> f32x4_floor;
            case f32x4_ge -> f32x4_ge;
            case f32x4_gt -> f32x4_gt;
            case f32x4_le -> f32x4_le;
            case f32x4_lt -> f32x4_lt;
            case f32x4_max -> f32x4_max;
            case f32x4_min -> f32x4_min;
            case f32x4_mul -> f32x4_mul;
            case f32x4_ne -> f32x4_ne;
            case f32x4_nearest -> f32x4_nearest;
            case f32x4_neg -> f32x4_neg;
            case f32x4_pmax -> f32x4_pmax;
            case f32x4_pmin -> f32x4_pmin;
            case f32x4_splat -> f32x4_splat;
            case f32x4_sqrt -> f32x4_sqrt;
            case f32x4_sub -> f32x4_sub;
            case f32x4_trunc -> f32x4_trunc;
            case f64_abs -> f64_abs;
            case f64_add -> f64_add;
            case f64_ceil -> f64_ceil;
            case f64_convert_i32_s -> f64_convert_i32_s;
            case f64_convert_i32_u -> f64_convert_i32_u;
            case f64_convert_i64_s -> f64_convert_i64_s;
            case f64_convert_i64_u -> f64_convert_i64_u;
            case f64_copysign -> f64_copysign;
            case f64_div -> f64_div;
            case f64_eq -> f64_eq;
            case f64_floor -> f64_floor;
            case f64_ge -> f64_ge;
            case f64_gt -> f64_gt;
            case f64_le -> f64_le;
            case f64_lt -> f64_lt;
            case f64_max -> f64_max;
            case f64_min -> f64_min;
            case f64_mul -> f64_mul;
            case f64_ne -> f64_ne;
            case f64_nearest -> f64_nearest;
            case f64_neg -> f64_neg;
            case f64_promote_f32 -> f64_promote_f32;
            case f64_reinterpret_i64 -> f64_reinterpret_i64;
            case f64_sqrt -> f64_sqrt;
            case f64_sub -> f64_sub;
            case f64_trunc -> f64_trunc;
            case f64x2_abs -> f64x2_abs;
            case f64x2_add -> f64x2_add;
            case f64x2_ceil -> f64x2_ceil;
            case f64x2_convert_low_i32x4_s -> f64x2_convert_low_i32x4_s;
            case f64x2_convert_low_i32x4_u -> f64x2_convert_low_i32x4_u;
            case f64x2_div -> f64x2_div;
            case f64x2_eq -> f64x2_eq;
            case f64x2_floor -> f64x2_floor;
            case f64x2_ge -> f64x2_ge;
            case f64x2_gt -> f64x2_gt;
            case f64x2_le -> f64x2_le;
            case f64x2_lt -> f64x2_lt;
            case f64x2_max -> f64x2_max;
            case f64x2_min -> f64x2_min;
            case f64x2_mul -> f64x2_mul;
            case f64x2_ne -> f64x2_ne;
            case f64x2_nearest -> f64x2_nearest;
            case f64x2_neg -> f64x2_neg;
            case f64x2_pmax -> f64x2_pmax;
            case f64x2_pmin -> f64x2_pmin;
            case f64x2_promote_low_f32x4 -> f64x2_promote_low_f32x4;
            case f64x2_splat -> f64x2_splat;
            case f64x2_sqrt -> f64x2_sqrt;
            case f64x2_sub -> f64x2_sub;
            case f64x2_trunc -> f64x2_trunc;
            case i16x8_abs -> i16x8_abs;
            case i16x8_add -> i16x8_add;
            case i16x8_add_sat_s -> i16x8_add_sat_s;
            case i16x8_add_sat_u -> i16x8_add_sat_u;
            case i16x8_all_true -> i16x8_all_true;
            case i16x8_avgr_u -> i16x8_avgr_u;
            case i16x8_bitmask -> i16x8_bitmask;
            case i16x8_eq -> i16x8_eq;
            case i16x8_extadd_pariwise_i8x16_s -> i16x8_extadd_pariwise_i8x16_s;
            case i16x8_extadd_pariwise_i8x16_u -> i16x8_extadd_pariwise_i8x16_u;
            case i16x8_extend_high_i8x16_s -> i16x8_extend_high_i8x16_s;
            case i16x8_extend_high_i8x16_u -> i16x8_extend_high_i8x16_u;
            case i16x8_extend_low_i8x16_s -> i16x8_extend_low_i8x16_s;
            case i16x8_extend_low_i8x16_u -> i16x8_extend_low_i8x16_u;
            case i16x8_extmul_high_i8x16_s -> i16x8_extmul_high_i8x16_s;
            case i16x8_extmul_high_i8x16_u -> i16x8_extmul_high_i8x16_u;
            case i16x8_extmul_low_i8x16_s -> i16x8_extmul_low_i8x16_s;
            case i16x8_extmul_low_i8x16_u -> i16x8_extmul_low_i8x16_u;
            case i16x8_ge_s -> i16x8_ge_s;
            case i16x8_ge_u -> i16x8_ge_u;
            case i16x8_gt_s -> i16x8_gt_s;
            case i16x8_gt_u -> i16x8_gt_u;
            case i16x8_le_s -> i16x8_le_s;
            case i16x8_le_u -> i16x8_le_u;
            case i16x8_lt_s -> i16x8_lt_s;
            case i16x8_lt_u -> i16x8_lt_u;
            case i16x8_max_s -> i16x8_max_s;
            case i16x8_max_u -> i16x8_max_u;
            case i16x8_min_s -> i16x8_min_s;
            case i16x8_min_u -> i16x8_min_u;
            case i16x8_mul -> i16x8_mul;
            case i16x8_narrow_i32x4_s -> i16x8_narrow_i32x4_s;
            case i16x8_narrow_i32x4_u -> i16x8_narrow_i32x4_u;
            case i16x8_ne -> i16x8_ne;
            case i16x8_neg -> i16x8_neg;
            case i16x8_q15mulr_sat_s -> i16x8_q15mulr_sat_s;
            case i16x8_shl -> i16x8_shl;
            case i16x8_shr_s -> i16x8_shr_s;
            case i16x8_shr_u -> i16x8_shr_u;
            case i16x8_splat -> i16x8_splat;
            case i16x8_sub -> i16x8_sub;
            case i16x8_sub_sat_s -> i16x8_sub_sat_s;
            case i16x8_sub_sat_u -> i16x8_sub_sat_u;
            case i32_add -> i32_add;
            case i32_and -> i32_and;
            case i32_clz -> i32_clz;
            case i32_ctz -> i32_ctz;
            case i32_div_s -> i32_div_s;
            case i32_div_u -> i32_div_u;
            case i32_eq -> i32_eq;
            case i32_eqz -> i32_eqz;
            case i32_extend16_s -> i32_extend16_s;
            case i32_extend8_s -> i32_extend8_s;
            case i32_ge_s -> i32_ge_s;
            case i32_ge_u -> i32_ge_u;
            case i32_gt_s -> i32_gt_s;
            case i32_gt_u -> i32_gt_u;
            case i32_le_s -> i32_le_s;
            case i32_le_u -> i32_le_u;
            case i32_lt_s -> i32_lt_s;
            case i32_lt_u -> i32_lt_u;
            case i32_mul -> i32_mul;
            case i32_ne -> i32_ne;
            case i32_or -> i32_or;
            case i32_popcnt -> i32_popcnt;
            case i32_reinterpret_f32 -> i32_reinterpret_f32;
            case i32_rem_s -> i32_rem_s;
            case i32_rem_u -> i32_rem_u;
            case i32_rotl -> i32_rotl;
            case i32_rotr -> i32_rotr;
            case i32_shl -> i32_shl;
            case i32_shr_s -> i32_shr_s;
            case i32_shr_u -> i32_shr_u;
            case i32_sub -> i32_sub;
            case i32_trunc_f32_s -> i32_trunc_f32_s;
            case i32_trunc_f32_u -> i32_trunc_f32_u;
            case i32_trunc_f64_s -> i32_trunc_f64_s;
            case i32_trunc_f64_u -> i32_trunc_f64_u;
            case i32_trunc_sat_f32_s -> i32_trunc_sat_f32_s;
            case i32_trunc_sat_f32_u -> i32_trunc_sat_f32_u;
            case i32_trunc_sat_f64_s -> i32_trunc_sat_f64_s;
            case i32_trunc_sat_f64_u -> i32_trunc_sat_f64_u;
            case i32_wrap_i64 -> i32_wrap_i64;
            case i32_xor -> i32_xor;
            case i32x4_abs -> i32x4_abs;
            case i32x4_add -> i32x4_add;
            case i32x4_all_true -> i32x4_all_true;
            case i32x4_bitmask -> i32x4_bitmask;
            case i32x4_dot_i16x8_s -> i32x4_dot_i16x8_s;
            case i32x4_eq -> i32x4_eq;
            case i32x4_extadd_pariwise_i16x8_s -> i32x4_extadd_pariwise_i16x8_s;
            case i32x4_extadd_pariwise_i16x8_u -> i32x4_extadd_pariwise_i16x8_u;
            case i32x4_extend_high_i16x8_s -> i32x4_extend_high_i16x8_s;
            case i32x4_extend_high_i16x8_u -> i32x4_extend_high_i16x8_u;
            case i32x4_extend_low_i16x8_s -> i32x4_extend_low_i16x8_s;
            case i32x4_extend_low_i16x8_u -> i32x4_extend_low_i16x8_u;
            case i32x4_extmul_high_i16x8_s -> i32x4_extmul_high_i16x8_s;
            case i32x4_extmul_high_i16x8_u -> i32x4_extmul_high_i16x8_u;
            case i32x4_extmul_low_i16x8_s -> i32x4_extmul_low_i16x8_s;
            case i32x4_extmul_low_i16x8_u -> i32x4_extmul_low_i16x8_u;
            case i32x4_ge_s -> i32x4_ge_s;
            case i32x4_ge_u -> i32x4_ge_u;
            case i32x4_gt_s -> i32x4_gt_s;
            case i32x4_gt_u -> i32x4_gt_u;
            case i32x4_le_s -> i32x4_le_s;
            case i32x4_le_u -> i32x4_le_u;
            case i32x4_lt_s -> i32x4_lt_s;
            case i32x4_lt_u -> i32x4_lt_u;
            case i32x4_max_s -> i32x4_max_s;
            case i32x4_max_u -> i32x4_max_u;
            case i32x4_min_s -> i32x4_min_s;
            case i32x4_min_u -> i32x4_min_u;
            case i32x4_mul -> i32x4_mul;
            case i32x4_ne -> i32x4_ne;
            case i32x4_neg -> i32x4_neg;
            case i32x4_shl -> i32x4_shl;
            case i32x4_shr_s -> i32x4_shr_s;
            case i32x4_shr_u -> i32x4_shr_u;
            case i32x4_splat -> i32x4_splat;
            case i32x4_sub -> i32x4_sub;
            case i32x4_trunc_sat_f32x4_s -> i32x4_trunc_sat_f32x4_s;
            case i32x4_trunc_sat_f32x4_u -> i32x4_trunc_sat_f32x4_u;
            case i32x4_trunc_sat_f64x2_s_zero -> i32x4_trunc_sat_f64x2_s_zero;
            case i32x4_trunc_sat_f64x2_u_zero -> i32x4_trunc_sat_f64x2_u_zero;
            case i64_add -> i64_add;
            case i64_and -> i64_and;
            case i64_clz -> i64_clz;
            case i64_ctz -> i64_ctz;
            case i64_div_s -> i64_div_s;
            case i64_div_u -> i64_div_u;
            case i64_eq -> i64_eq;
            case i64_eqz -> i64_eqz;
            case i64_extend16_s -> i64_extend16_s;
            case i64_extend32_s -> i64_extend32_s;
            case i64_extend8_s -> i64_extend8_s;
            case i64_extend_i32_s -> i64_extend_i32_s;
            case i64_extend_i32_u -> i64_extend_i32_u;
            case i64_ge_s -> i64_ge_s;
            case i64_ge_u -> i64_ge_u;
            case i64_gt_s -> i64_gt_s;
            case i64_gt_u -> i64_gt_u;
            case i64_le_s -> i64_le_s;
            case i64_le_u -> i64_le_u;
            case i64_lt_s -> i64_lt_s;
            case i64_lt_u -> i64_lt_u;
            case i64_mul -> i64_mul;
            case i64_ne -> i64_ne;
            case i64_or -> i64_or;
            case i64_popcnt -> i64_popcnt;
            case i64_reinterpret_f64 -> i64_reinterpret_f64;
            case i64_rem_s -> i64_rem_s;
            case i64_rem_u -> i64_rem_u;
            case i64_rotl -> i64_rotl;
            case i64_rotr -> i64_rotr;
            case i64_shl -> i64_shl;
            case i64_shr_s -> i64_shr_s;
            case i64_shr_u -> i64_shr_u;
            case i64_sub -> i64_sub;
            case i64_trunc_f32_s -> i64_trunc_f32_s;
            case i64_trunc_f32_u -> i64_trunc_f32_u;
            case i64_trunc_f64_s -> i64_trunc_f64_s;
            case i64_trunc_f64_u -> i64_trunc_f64_u;
            case i64_trunc_sat_f32_s -> i64_trunc_sat_f32_s;
            case i64_trunc_sat_f32_u -> i64_trunc_sat_f32_u;
            case i64_trunc_sat_f64_s -> i64_trunc_sat_f64_s;
            case i64_trunc_sat_f64_u -> i64_trunc_sat_f64_u;
            case i64_xor -> i64_xor;
            case i64x2_abs -> i64x2_abs;
            case i64x2_add -> i64x2_add;
            case i64x2_all_true -> i64x2_all_true;
            case i64x2_bitmask -> i64x2_bitmask;
            case i64x2_dot_i16x8_s -> i64x2_dot_i16x8_s;
            case i64x2_extend_high_i32x4_s -> i64x2_extend_high_i32x4_s;
            case i64x2_extend_high_i32x4_u -> i64x2_extend_high_i32x4_u;
            case i64x2_extend_low_i32x4_s -> i64x2_extend_low_i32x4_s;
            case i64x2_extend_low_i32x4_u -> i64x2_extend_low_i32x4_u;
            case i64x2_extmul_high_i32x4_s -> i64x2_extmul_high_i32x4_s;
            case i64x2_extmul_high_i32x4_u -> i64x2_extmul_high_i32x4_u;
            case i64x2_extmul_low_i32x4_s -> i64x2_extmul_low_i32x4_s;
            case i64x2_extmul_low_i32x4_u -> i64x2_extmul_low_i32x4_u;
            case i64x2_max_s -> i64x2_max_s;
            case i64x2_max_u -> i64x2_max_u;
            case i64x2_min_s -> i64x2_min_s;
            case i64x2_min_u -> i64x2_min_u;
            case i64x2_mul -> i64x2_mul;
            case i64x2_neg -> i64x2_neg;
            case i64x2_shl -> i64x2_shl;
            case i64x2_shr_s -> i64x2_shr_s;
            case i64x2_shr_u -> i64x2_shr_u;
            case i64x2_splat -> i64x2_splat;
            case i64x2_sub -> i64x2_sub;
            case i8x16_abs -> i8x16_abs;
            case i8x16_add -> i8x16_add;
            case i8x16_add_sat_s -> i8x16_add_sat_s;
            case i8x16_add_sat_u -> i8x16_add_sat_u;
            case i8x16_all_true -> i8x16_all_true;
            case i8x16_avgr_u -> i8x16_avgr_u;
            case i8x16_bitmask -> i8x16_bitmask;
            case i8x16_eq -> i8x16_eq;
            case i8x16_ge_s -> i8x16_ge_s;
            case i8x16_ge_u -> i8x16_ge_u;
            case i8x16_gt_s -> i8x16_gt_s;
            case i8x16_gt_u -> i8x16_gt_u;
            case i8x16_le_s -> i8x16_le_s;
            case i8x16_le_u -> i8x16_le_u;
            case i8x16_lt_s -> i8x16_lt_s;
            case i8x16_lt_u -> i8x16_lt_u;
            case i8x16_max_s -> i8x16_max_s;
            case i8x16_max_u -> i8x16_max_u;
            case i8x16_min_s -> i8x16_min_s;
            case i8x16_min_u -> i8x16_min_u;
            case i8x16_narrow_i16x8_s -> i8x16_narrow_i16x8_s;
            case i8x16_narrow_i16x8_u -> i8x16_narrow_i16x8_u;
            case i8x16_ne -> i8x16_ne;
            case i8x16_neg -> i8x16_neg;
            case i8x16_popcnt -> i8x16_popcnt;
            case i8x16_shl -> i8x16_shl;
            case i8x16_shr_s -> i8x16_shr_s;
            case i8x16_shr_u -> i8x16_shr_u;
            case i8x16_splat -> i8x16_splat;
            case i8x16_sub -> i8x16_sub;
            case i8x16_sub_sat_s -> i8x16_sub_sat_s;
            case i8x16_sub_sat_u -> i8x16_sub_sat_u;
            case i8x16_swizzle -> i8x16_swizzle;
            case nop -> nop;
            case ref_is_null -> ref_is_null;
            case return_ -> return_;
            case select -> select;
            case unreachable -> unreachable;
            case v128_and -> v128_and;
            case v128_andnot -> v128_andnot;
            case v128_any_true -> v128_any_true;
            case v128_bitselect -> v128_bitselect;
            case v128_not -> v128_not;
            case v128_or -> v128_or;
            case v128_xor -> v128_xor;
        };
    }
}
